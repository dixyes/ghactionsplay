name: ceshi
on: 
  #push:
  workflow_dispatch:
    inputs:
      dasd:
        description: 'a very very very very very very very very very very very very very very very very very very very very very very very very very very long nonsense'
        required: false
        default: '[ "a", "b" ]'
jobs:
  ceshi:
    name: ceshicehs
    if: false
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: ["ubuntu-16.04","ubuntu-18.04","ubuntu-20.04"]
      max-parallel: 3
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: play
        run: |
          cc -nostdlib -nostartfiles -static faccessat2.S -o faccessat2 &&
          printf "FROM scratch\nCOPY faccessat2 /bin/sh\nRUN nonce\n" > Dockerfile.faccessat2 &&
          docker build . -f Dockerfile.faccessat2 -t dixyes/faccessat2 || echo failed
          # install new docker from docker offical repo
          # commands is from https://docs.docker.com/engine/install/ubuntu/
          sudo apt-get remove -yqq docker docker-engine docker.io containerd runc &&
          sudo apt-get install -yqq \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg-agent \
              software-properties-common &&
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
          sudo add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" &&
          sudo apt-get update &&
          sudo apt-get install -yqq docker-ce docker-ce-cli containerd.io &&
          sudo systemctl daemon-reload &&
          sudo systemctl restart docker
          echo "docker now is"
          docker info
          cc -nostdlib -nostartfiles -static faccessat2.S -o faccessat2 &&
          printf "FROM scratch\nCOPY faccessat2 /bin/sh\nRUN nonce\n" > Dockerfile.faccessat2 &&
          docker build . -f Dockerfile.faccessat2 -t dixyes/faccessat2 || echo failed
  paly:
    if: false
    name: play!
    runs-on: "macos-latest"
    steps:
      - name: play
        run: |
          echo cpunum `nproc`
  paly2:
    if: false
    name: play2
    runs-on: "ubuntu-latest"
    outputs:
      ceshi: ${{steps.p1.outputs.a}}
    strategy:
      matrix:
        ceshi: [1, 2, 3]
    steps:
      - name: play1
        id: p1
        run: |
          echo "::set-output name=a::${{ matrix.ceshi }}"
  play3:
    if: false
    name: play3
    runs-on: "ubuntu-latest"
    needs: paly2
    steps:
      - name: pp
        run: |
          echo "fu: ${{ needs.paly2.outputs.ceshi }}"
  ceshici:
    if: false
    name: ceshi CI
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: [windows-2016]
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v1
      - name: Plays
        shell: cmd
        run: |
          echo ${{ github.run_id }} ${{ github.job }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          tools: phpize
          coverage: none
      - name: tell me php
        run: |
          php -v
          php --ini
          php -m
          php -r "echo ini_get('extension_dir');"
      - name: pre ceshi
        run: ls .
      - name: ceshi
        uses: ./.github/workflows/ceshiaction
      - name: post ceshi
        run: ls .
  ceshici2:
    if: false
    name: ceshi CI2 on ${{ matrix.os }} ${{ matrix.ver }}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest"]
        ver: [ "v1", "v2", "master" ]
      max-parallel: 9
      fail-fast: false
    steps:
      - name: fetch setup-php
        uses: actions/checkout@v2
        with:
          repository: shivammathur/setup-php
          ref: ${{matrix.ver}}
          path: setup-php

      - name: Setup PHP
        uses: ./setup-php
        with:
          php-version: 8.0
          tools: phpize
          coverage: none
        env:
          phpts: ts
      - name: tell me php
        shell: bash
        run: |
          php -v
          #php --ini
          #php -m
          #php -r "echo ini_get('extension_dir');"
  ceshix:
    if: false
    name: ceshi
    runs-on: "windows-latest"
    steps:
      - name: Setup PHP
        if: false
        uses: shivammathur/setup-php@master
        with:
          php-version: "master"
          # ini-values: pcov.directory=lib
          # coverage: pcov
          coverage: none
          extensions: curl,openssl
      - name: ceeee
        if: false
        shell: pwsh
        run: |
          Get-ChildItem -Recurse C:\tools\php
          php -v
      - name: ceshi
        if: false
        shell: powershell
        run: |
          which pwsh
          which powershell
          docker run --name ceshi --rm mcr.microsoft.com/windows/servercore:ltsc2019 echo hello
      - name: hgh
        if: false
        shell: cmd
        run: |
          ECHO ::group::Start MSVC environment
          FOR /F "USEBACKQ DELIMS=" %%i in (`vswhere.exe -prerelease -latest -property installationPath`) do (
            IF EXIST "%%i\Common7\Tools\vsdevcmd.bat" (
              CALL "%%i\Common7\Tools\vsdevcmd.bat"
            )
          )
          where clang_rt.*
  echo:
    if: false
    name: echo
    runs-on: "ubuntu-latest"
    steps:
      - name: sha
        shell: bash
        run: |
          which php
          ghci || :
      - name: echo
        uses: dixyes/actionsecho@main
  echo2:
    if: false
    name: echo2
    runs-on: "windows-latest"
    steps:
      - name: sha2
        shell: pwsh
        run: |
          try {
            Get-Contents "C:\Program Files\Common Files\SSL\openssl.cnf"
          } catch {}
          try {
            Get-Contents "C:\usr\local\ssl\openssl.cnf"
          } catch {}
      - name: sha
        shell: bash
        run: |
          which php
  echo3:
    if: false
    name: echo3
    runs-on: "macos-latest"
    steps:
      - name: sha2
        shell: bash
        run: |
          which php
          ls -l /usr/local/bin/php
          php -v
  ceshimysq:
    if: false
    name: mysqlceshi
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ 'windows-latest', 'macos-latest', 'ubuntu-latest' ]
      fail-fast: false
    env:
      MYSQL_WORKDIR: ${{ 'windows-latest' == matrix.os && 'C:/mysql' || '/tmp/mysql'}}
    steps:
      - name: gen conf
        shell: bash
        run: |
          ${{ 'macOS' == runner.os && 'brew install mysql' || ''}}
          echo gen conf
          mkdir -p ${MYSQL_WORKDIR}/data
          cat > ${MYSQL_WORKDIR}/my.cnf <<EOF
          [mysql]
          protocol=TCP
          port=3306
          user=root
          [mysqld]
          pid_file=${MYSQL_WORKDIR}/mysqld.pid
          socket=${MYSQL_WORKDIR}/mysqld.sock
          datadir=${MYSQL_WORKDIR}/data
          bind-address=127.0.0.1
          port=3306
          symbolic-links=0
          server-id=1
          log_bin=somebinlog
          binlog_checksum=NONE
          binlog_format=ROW
          EOF
      - name: run svr (unix)
        if: runner.os != 'Windows'
        run: |
          echo initialize
          mysqld "--defaults-file=${{env.MYSQL_WORKDIR}}/my.cnf" --initialize-insecure
          echo daemon
          mysqld "--defaults-file=${{env.MYSQL_WORKDIR}}/my.cnf" --daemonize --log_error=error.log || echo failed daemon
          cat ${{env.MYSQL_WORKDIR}}/data/error.log
      - name: run svr (win)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo initialize
          mysqld "--defaults-file=${{env.MYSQL_WORKDIR}}/my.cnf" --initialize-insecure
          echo daemon
          START "" /b mysqld "--defaults-file=${{env.MYSQL_WORKDIR}}/my.cnf" --log_error=error.log
          ping 127.0.0.1 -n 2
          type C:\mysql\data\error.log
          echo nope
      - name: show me info
        shell: bash
        run: |
          mysql --host=127.0.0.1 --port=3306 --user=root -e "show databases;"
  wth:
    if: false
    name: ceshhhh
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        name: ${{ (github.event.inputs && github.event.inputs.ref) || '[ "1", "2" ]' }}
      fail-fast: false
    steps:
      - name: echo
        run: |
          echo ${{matrix.name}}
  ceshin:
    name: ceshin
    runs-on: 'ubuntu-latest'
    container: 'alpine'
    steps:
      - name: debug
        run: |
          set +e
          set -x
          which node
          /lib/ld-musl-x86_64.so.1 --list `which node`
          
      - name: Setup node
        if: always()
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: debugafter
        if: always()
        run: |
          set +e
          set -x
          apk add gcompat libstdc++
          which node
          /lib/ld-musl-x86_64.so.1 --list `which node`
          node -v
